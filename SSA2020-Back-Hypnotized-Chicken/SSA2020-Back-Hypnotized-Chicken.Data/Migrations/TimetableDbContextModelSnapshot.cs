// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SSA2020_Back_Hypnotized_Chicken.Data;

namespace SSA2020_Back_Hypnotized_Chicken.Data.Migrations
{
    [DbContext(typeof(TimetableDbContext))]
    partial class TimetableDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Classroom", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("label")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Location")
                        .HasColumnName("location")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("classrooms");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Department", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Lecturer", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Vocation")
                        .HasColumnName("vocation")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("lecturers");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Module", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("modules");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Schedule", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("DepartmentId")
                        .HasColumnName("department_id")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsActive")
                        .HasColumnName("is_active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("text");

                    b.Property<short>("SemesterId")
                        .HasColumnName("semester_id")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("SemesterId");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Semester", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("semesters");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Slot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsOptional")
                        .HasColumnName("is_optional")
                        .HasColumnType("boolean");

                    b.Property<short>("LecturerId")
                        .HasColumnName("lecturer_id")
                        .HasColumnType("smallint");

                    b.Property<short>("ModuleId")
                        .HasColumnName("module_id")
                        .HasColumnType("smallint");

                    b.Property<short>("OptionalSubjectNumber")
                        .HasColumnName("optional_subject_number")
                        .HasColumnType("smallint");

                    b.Property<short>("SemesterId")
                        .HasColumnName("semester_id")
                        .HasColumnType("smallint");

                    b.Property<short>("SubjectId")
                        .HasColumnName("subject_id")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SemesterId");

                    b.HasIndex("SubjectId");

                    b.ToTable("slots");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Subject", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Term", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<short>("ClassroomId")
                        .HasColumnName("classroom_id")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("EndTime")
                        .HasColumnName("end_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("Group")
                        .HasColumnName("group")
                        .HasColumnType("smallint");

                    b.Property<string>("Module")
                        .HasColumnName("module")
                        .HasColumnType("text");

                    b.Property<short>("NumberOfExercises")
                        .HasColumnName("number_of_exercises")
                        .HasColumnType("smallint");

                    b.Property<short>("NumberOfLabExercises")
                        .HasColumnName("number_of_lab_exercises")
                        .HasColumnType("smallint");

                    b.Property<short>("NumberOfLectures")
                        .HasColumnName("number_of_lectures")
                        .HasColumnType("smallint");

                    b.Property<short>("ScheduleId")
                        .HasColumnName("schedule_id")
                        .HasColumnType("smallint");

                    b.Property<long>("SlotId")
                        .HasColumnName("slot_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnName("start_time")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<short>("WeekdayId")
                        .HasColumnName("weekday_id")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SlotId");

                    b.HasIndex("WeekdayId");

                    b.ToTable("terms");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.User", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("password_hash")
                        .HasColumnType("bytea")
                        .HasMaxLength(255);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnName("password_salt")
                        .HasColumnType("bytea")
                        .HasMaxLength(255);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnName("role")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("token")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedAt = new DateTime(2020, 5, 19, 13, 54, 26, 532, DateTimeKind.Utc).AddTicks(7020),
                            FirstName = "admin",
                            LastName = "admin",
                            PasswordHash = new byte[] { 138, 155, 2, 205, 152, 169, 245, 130, 253, 38, 159, 69, 101, 238, 245, 212, 140, 99, 163, 27, 105, 225, 51, 28, 116, 231, 84, 29, 35, 128, 58, 126, 201, 81, 209, 82, 217, 134, 111, 233, 197, 7, 97, 3, 177, 66, 88, 62, 141, 129, 7, 65, 51, 94, 146, 126, 156, 76, 159, 67, 181, 83, 190, 40 },
                            PasswordSalt = new byte[] { 104, 240, 165, 21, 76, 62, 228, 178, 15, 24, 32, 207, 63, 41, 21, 139, 28, 219, 12, 30, 199, 205, 77, 54, 98, 226, 103, 236, 130, 67, 126, 120, 74, 31, 191, 137, 156, 21, 219, 100, 8, 123, 163, 225, 183, 143, 84, 230, 35, 226, 109, 182, 102, 136, 122, 146, 92, 196, 183, 85, 71, 151, 56, 18, 58, 232, 220, 216, 154, 183, 216, 160, 248, 58, 196, 63, 188, 97, 242, 95, 117, 131, 243, 70, 252, 37, 177, 204, 251, 163, 114, 74, 46, 146, 63, 217, 121, 79, 121, 168, 39, 185, 64, 128, 191, 8, 196, 159, 136, 18, 122, 38, 137, 41, 48, 84, 220, 75, 120, 242, 27, 116, 250, 60, 233, 151, 226, 67 },
                            Role = "Admin",
                            Token = "",
                            UpdatedAt = new DateTime(2020, 5, 19, 13, 54, 26, 532, DateTimeKind.Utc).AddTicks(7020),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Weekday", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("smallint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnName("updated_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("weekdays");
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Module", b =>
                {
                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Department", "Department")
                        .WithMany("Modules")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Schedule", b =>
                {
                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Department", "Department")
                        .WithMany("Schedules")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Semester", "Semester")
                        .WithMany("Schedules")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Slot", b =>
                {
                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Lecturer", "Lecturer")
                        .WithMany("Slots")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Module", "Module")
                        .WithMany("Slots")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Semester", "Semester")
                        .WithMany("Slots")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Subject", "Subject")
                        .WithMany("Slots")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Term", b =>
                {
                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Classroom", "Classroom")
                        .WithMany("Terms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Schedule", "Schedule")
                        .WithMany("Terms")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Slot", "Slot")
                        .WithMany("Terms")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SSA2020_Back_Hypnotized_Chicken.Data.Entities.Weekday", "Weekday")
                        .WithMany("Terms")
                        .HasForeignKey("WeekdayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
